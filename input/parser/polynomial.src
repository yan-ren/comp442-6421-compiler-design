// ====== struct declarations ====== //
struct POLYNOMIAL {
	public func evaluate(x: float) -> float;
};

struct LINEAR inherits POLYNOMIAL {
	private let a: float;
	private let b: float;
	public  func build(A: float, B: float) -> LINEAR;
	public  func evaluate(x: float) -> float;
};

struct QUADRATIC inherits POLYNOMIAL {
	private let a: float;
	private let b: float;
	private let c: float;
	public  func build(A: float, B: float, C: float) -> QUADRATIC;
	public  func evaluate(x: float) -> float;
};

// ====== struct implementations ====== //
impl POLYNOMIAL {
  func evaluate(x: float) -> float
  {
    return (0.0);
  }
}

impl QUADRATIC {
  func evaluate(x: float) -> float
  {
    let result: float;
    //Using Horner's method
    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(A: float, B: float, C: float) -> QUADRATIC
  {
    let new_function: QUADRATIC ;
    new_function.a = A;
    new_function.b = B;
    new_function.c = C;
    return (new_function);
  }
}

impl LINEAR {
  func build(A: float, B: float) -> LINEAR
  {
    let new_function: LINEAR;
    new_function.a = A;
    new_function.b = B;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}

// ====== main ====== //
func main() -> void
{
  let f1: LINEAR;
  let f2: QUADRATIC;
  let counter: float;
  f1 = f1.build(2.0, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1.0;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
}

/*
1.   |X| global symbol table
2.   |X| class symbol table
3.1  |X| class data member
3.2  |X| function's local variable
4.1  |X| free function
4.2  |X| member function
6.1  | | undeclared member function definition
6.2  | | undefined member function declaration
8.1  | | multiply declared class
8.2  | | multiply declared free function
8.3  | | multiply declared identifier in class
8.4  | | multiply declared identifier in function
8.5  | | shadowed inherited data member
9.1  | | Overloaded free function
9.2  | | Overloaded member function
9.3  | | Overridden inherited member function
10.1 | | Type error in expression
10.2 | | Type error in assignment statement
10.3 | | Type error in return statement
11.1 | | Undeclared local variable
11.2 | | Undeclared data member
11.3 | | Undeclared member function
11.4 | | Undeclared free function
11.5 | | Undeclared class
12.1 | | Function call with wrong number of parameters
12.2 | | Function call with wrong type of parameters
13.1 | | Use of array with wrong number of dimensions
13.2 | | Array index is not an integer
13.3 | | Array parameter using wrong number of dimensions
14.1 | | Circular class dependency
15.1 | | "." operator used on non-class type
*/

/*
    classes
    --------------------------------------
| | no class declaration
| | class declaration
|X| multiple class declarations
|X| no data member declaration
|X| data member declaration
|X| multiple data member declaration
| | no member function declaration
|X| member function declaration
|X| multiple member function declaration
| | no member
|X| no inherited class
|X| one inherited class
| | multiple inherited classes
|X| private member specifier
|X| public member specifier

    functions: definitions
    --------------------------------------
| | no main function definition
|X| main function definition
|X| no free function definition
| | free function definition
| | multiple free function definitions
| | no member function definition
|X| member function definition
|X| multiple member function definitions
| | return type: void
| | return type: integer
|X| return type: float
|X| return type: id
| | return type: array (not allowed)

    functions: formal parameters
    --------------------------------------
| | type: integer
|X| type: float
| | type: id
| | type: 1-dim array
| | type: n-dim array
| | type: array (with size)
| | type: array (without size)

    functions: calls
    --------------------------------------
| | free function call
|X| member function call
| | parameters:0
|X| parameters:1
|X| parameters:n
| | array parameter - 1-dim
| | array parameter - n-dim
| | array parameter - with size
| | array parameter - without size
| | function call as statement
|X| function call as expression factor
| | expression as parameter

    variable declaration
    --------------------------------------
| | type: integer
| | type: float
| | type: string
|X| type: id
| | type: 1-dim array
| | type: n-dim array
| | type: array (with size)
| | type: array (without size)

    function body: local variable declarations
    --------------------------------------
| | no local variable declarations
|X| local variable declarations
| | intertwined statements and variable declarations

    function body: statements
    --------------------------------------
| | no statement
| | 1 statement
|X| n statements
| | if statement
| | if: empty then or else blocks
| | if: 1-statement then or else blocks
| | if: n-statements then or else blocks
|X| while statement
| | while: empty block
| | while: 1-statement block
|X| while: n-statement block
| | read(<variable>) statement
|X| write(<expr>) statement
|X| return(<expr>) statement
|X| assignment statement

    variable + idnest
    --------------------------------------
|X| id
|X| id.id
|X| id.id(id)
| | id(id).id
| | id(id).id()
| | id.id[id]
| | id[id].id
| | id[id].id[id]
| | id.id[id][id]
| | id[id][id].id
| | id[id][id].id[id][id]
| | id(id).id[id]
| | id(id).id[id][id]
| | expression as array index

    expressions
    --------------------------------------
| | single variable
| | involving addop
| | involving multop
| | involving relop
|X| involving addop + multop
| | involving multop + relop
| | involving addop + multop + relop
| | involving parentheses
| | involving nested parenhteses
| | involving not
| | involving sign
| | involving literals
|X| involving variable + idnest
|X| involving function calls
| | involving all the above in one expression
*/

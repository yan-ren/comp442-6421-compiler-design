package lexicalanalyzer;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class Constants {
    public class LA_TYPE {
        public static final String ID = "id";
        public static final String INTNUM = "intnum";
        public static final String FLOATNUM = "floatnum";
        public static final String ASSIGN = "assign";
        public static final String EQ = "eq";
        public static final String LT = "lt";
        public static final String NOTEQ = "noteq";
        public static final String LEQ = "leq";
        public static final String GT = "gt";
        public static final String GEQ = "geq";
        public static final String COLON = "colon";
        public static final String COLONCOLON = "coloncolon";
        public static final String MINUS = "minus";
        public static final String ARROW = "arrow";
        public static final String PLUS = "plus";
        public static final String MULT = "mult";
        public static final String DOT = "dot";
        public static final String DIV = "div";
        public static final String INLINECMT = "inlinecmt";
        public static final String BLOCKCMT = "blockcmt";
        public static final String IF = "if";
        public static final String THEN = "then";
        public static final String ELSE = "else";
        public static final String INTEGER = "integer";
        public static final String FLOAT = "float";
        public static final String VOID = "void";
        public static final String PUBLIC = "public";
        public static final String PRIVATE = "private";
        public static final String FUNC = "func";
        public static final String VAR = "var";
        public static final String STRUCT = "struct";
        public static final String WHILE = "while";
        public static final String READ = "read";
        public static final String WRITE = "write";
        public static final String RETURN = "return";
        public static final String SELF = "self";
        public static final String INHERITS = "inherits";
        public static final String LET = "let";
        public static final String IMPL = "impl";
        public static final String OR = "or";
        public static final String AND = "and";
        public static final String NOT = "not";
        public static final String OPENPAR = "openpar";
        public static final String CLOSEPAR = "closepar";
        public static final String OPENCUBR = "opencubr";
        public static final String CLOSECUBR = "closecubr";
        public static final String OPENSQBR = "opensqbr";
        public static final String CLOSESQBR = "closesqbr";
        public static final String SEMI = "semi";
        public static final String COMMA = "comma";

        public static final String INVALIDNUM = "invalidnum";
        public static final String UNTERMINATED_BLOCK_CMT = "unterminated_block_cmt";
        public static final String INVALID_CHAR = "invalidchar";
        public static final String INVALID_ID = "invalidid";
    }

    public class UC_TYPE {
        public static final String AND = "and";
        public static final String ASSIGN = "equal";
        public static final String COMMA = "comma";
        public static final String DIV = "div";
        public static final String DOT = "dot";
        public static final String ELSE = "else";
        public static final String EQ = "eq";
        public static final String FLOAT = "float";
        public static final String FLOATNUM = "floatlit";
        public static final String FUNC = "func";
        public static final String GEQ = "geq";
        public static final String GT = "gt";
        public static final String ID = "id";
        public static final String IF = "if";
        public static final String IMPL = "impl";
        public static final String INHERITS = "inherits";
        public static final String INTEGER = "integer";
        public static final String INTNUM = "intlit";
        public static final String LEQ = "leq";
        public static final String LET = "let";
        public static final String OPENCUBR = "lcurbr";
        public static final String OPENPAR = "lpar";
        public static final String OPENSQBR = "lsqbr";
        public static final String LT = "lt";
        public static final String MINUS = "minus";
        public static final String MULT = "mult";
        public static final String NOTEQ = "neq";
        public static final String NOT = "not";
        public static final String OR = "or";
        public static final String PLUS = "plus";
        public static final String PRIVATE = "private";
        public static final String PUBLIC = "public";
        public static final String READ = "read";
        public static final String RETURN = "return";
        public static final String CLOSECUBR = "rcurbr";
        public static final String CLOSEPAR = "rpar";
        public static final String CLOSESQBR = "rsqbr";
        public static final String SEMI = "semi";
        public static final String STRUCT = "struct";
        public static final String VOID = "void";
        public static final String WHILE = "while";
        public static final String WRITE = "write";
        public static final String ARROW = "arrow";
        public static final String THEN = "then";
        public static final String COLON = "colon";
        public static final String EPSILON_SYMBOL = "âˆ…";
        public static final String EPSILON_WORD = "epsilon";
        // public static final String COLONCOLON = "coloncolon";
        // public static final String INLINECMT = "inlinecmt";
        // public static final String BLOCKCMT = "blockcmt";
        // public static final String VAR = "var";
        // public static final String SELF = "self";
    }

    public static final HashMap<String, String> UC_TYPE_TO_LA_TYPE = new HashMap<>() {
        {
            put(UC_TYPE.AND, LA_TYPE.AND);
            put(UC_TYPE.ASSIGN, LA_TYPE.ASSIGN);
            put(UC_TYPE.COMMA, LA_TYPE.COMMA);
            put(UC_TYPE.DIV, LA_TYPE.DIV);
            put(UC_TYPE.DOT, LA_TYPE.DOT);
            put(UC_TYPE.ELSE, LA_TYPE.ELSE);
            put(UC_TYPE.EQ, LA_TYPE.EQ);
            put(UC_TYPE.FLOAT, LA_TYPE.FLOAT);
            put(UC_TYPE.FLOATNUM, LA_TYPE.FLOATNUM);
            put(UC_TYPE.FUNC, LA_TYPE.FUNC);
            put(UC_TYPE.GEQ, LA_TYPE.GEQ);
            put(UC_TYPE.GT, LA_TYPE.GT);
            put(UC_TYPE.ID, LA_TYPE.ID);
            put(UC_TYPE.IF, LA_TYPE.IF);
            put(UC_TYPE.IMPL, LA_TYPE.IMPL);
            put(UC_TYPE.INHERITS, LA_TYPE.INHERITS);
            put(UC_TYPE.INTEGER, LA_TYPE.INTEGER);
            put(UC_TYPE.INTNUM, LA_TYPE.INTNUM);
            put(UC_TYPE.CLOSECUBR, LA_TYPE.CLOSECUBR);
            put(UC_TYPE.LEQ, LA_TYPE.LEQ);
            put(UC_TYPE.LET, LA_TYPE.LET);
            put(UC_TYPE.OPENPAR, LA_TYPE.OPENPAR);
            put(UC_TYPE.CLOSESQBR, LA_TYPE.CLOSESQBR);
            put(UC_TYPE.LT, LA_TYPE.LT);
            put(UC_TYPE.MINUS, LA_TYPE.MINUS);
            put(UC_TYPE.MULT, LA_TYPE.MULT);
            put(UC_TYPE.NOTEQ, LA_TYPE.NOTEQ);
            put(UC_TYPE.NOT, LA_TYPE.NOT);
            put(UC_TYPE.OR, LA_TYPE.OR);
            put(UC_TYPE.PLUS, LA_TYPE.PLUS);
            put(UC_TYPE.PRIVATE, LA_TYPE.PRIVATE);
            put(UC_TYPE.PUBLIC, LA_TYPE.PUBLIC);
            put(UC_TYPE.OPENCUBR, LA_TYPE.OPENCUBR);
            put(UC_TYPE.READ, LA_TYPE.READ);
            put(UC_TYPE.RETURN, LA_TYPE.RETURN);
            put(UC_TYPE.CLOSEPAR, LA_TYPE.CLOSEPAR);
            put(UC_TYPE.OPENSQBR, LA_TYPE.OPENSQBR);
            put(UC_TYPE.SEMI, LA_TYPE.SEMI);
            put(UC_TYPE.STRUCT, LA_TYPE.STRUCT);
            put(UC_TYPE.VOID, LA_TYPE.VOID);
            put(UC_TYPE.WHILE, LA_TYPE.WHILE);
            put(UC_TYPE.WRITE, LA_TYPE.WRITE);
            put(UC_TYPE.ARROW, LA_TYPE.ARROW);
            put(UC_TYPE.THEN, LA_TYPE.THEN);
            put(UC_TYPE.COLON, LA_TYPE.COLON);

            put(UC_TYPE.EPSILON_SYMBOL, UC_TYPE.EPSILON_WORD);
        }
    };

    public static final Set<String> SYNTACTIC_ANALYZER_TERMINAL = new HashSet<>() {
        {
            add(LA_TYPE.COMMA);
            add(LA_TYPE.PLUS);
            add(LA_TYPE.MINUS);
            add(LA_TYPE.OR);
            add(LA_TYPE.OPENSQBR);
            add(LA_TYPE.INTNUM);
            add(LA_TYPE.CLOSESQBR);
            add(LA_TYPE.ASSIGN);
            add(LA_TYPE.STRUCT);
            add(LA_TYPE.ID);
            add(LA_TYPE.OPENCUBR);
            add(LA_TYPE.CLOSECUBR);
            add(LA_TYPE.SEMI);
            add(LA_TYPE.OPENPAR);
            add(LA_TYPE.CLOSEPAR);
            add(LA_TYPE.FLOATNUM);
            add(LA_TYPE.NOT);
            add(LA_TYPE.COLON);
            add(LA_TYPE.VOID);
            add(LA_TYPE.DOT);
            add(LA_TYPE.MULT);
            add(LA_TYPE.DIV);
            add(LA_TYPE.AND);
            add(LA_TYPE.INHERITS);
            add(LA_TYPE.EQ);
            add(LA_TYPE.GEQ);
            add(LA_TYPE.GT);
            add(LA_TYPE.LEQ);
            add(LA_TYPE.LT);
            add(LA_TYPE.NOTEQ);
            add(LA_TYPE.IF);
            add(LA_TYPE.THEN);
            add(LA_TYPE.ELSE);
            add(LA_TYPE.READ);
            add(LA_TYPE.RETURN);
            add(LA_TYPE.WHILE);
            add(LA_TYPE.WRITE);
            add(LA_TYPE.FLOAT);
            add(LA_TYPE.INTEGER);
            add(LA_TYPE.PRIVATE);
            add(LA_TYPE.PUBLIC);
            add(LA_TYPE.FUNC);
            add(LA_TYPE.IMPL);
            add(LA_TYPE.LET);
            add(LA_TYPE.ARROW);
        }
    };
}

[inlinecmt, // ====== struct declarations ====== //\r\n, 1]
[struct, struct, 2]
[id, POLYNOMIAL, 2]
[opencubr, {, 2]
[public, public, 3]
[func, func, 3]
[id, evaluate, 3]
[openpar, (, 3]
[id, x, 3]
[colon, :, 3]
[float, float, 3]
[closepar, ), 3]
[arrow, ->, 3]
[float, float, 3]
[semi, ;, 3]
[closecubr, }, 4]
[semi, ;, 4]
[struct, struct, 6]
[id, LINEAR, 6]
[inherits, inherits, 6]
[id, POLYNOMIAL, 6]
[opencubr, {, 6]
[private, private, 7]
[let, let, 7]
[id, a, 7]
[colon, :, 7]
[float, float, 7]
[semi, ;, 7]
[private, private, 8]
[let, let, 8]
[id, b, 8]
[colon, :, 8]
[float, float, 8]
[semi, ;, 8]
[public, public, 9]
[func, func, 9]
[id, build, 9]
[openpar, (, 9]
[id, A, 9]
[colon, :, 9]
[float, float, 9]
[comma, ,, 9]
[id, B, 9]
[colon, :, 9]
[float, float, 9]
[closepar, ), 9]
[arrow, ->, 9]
[id, LINEAR, 9]
[semi, ;, 9]
[public, public, 10]
[func, func, 10]
[id, evaluate, 10]
[openpar, (, 10]
[id, x, 10]
[colon, :, 10]
[float, float, 10]
[closepar, ), 10]
[arrow, ->, 10]
[float, float, 10]
[semi, ;, 10]
[closecubr, }, 11]
[semi, ;, 11]
[struct, struct, 13]
[id, QUADRATIC, 13]
[inherits, inherits, 13]
[id, POLYNOMIAL, 13]
[opencubr, {, 13]
[private, private, 14]
[let, let, 14]
[id, a, 14]
[colon, :, 14]
[float, float, 14]
[semi, ;, 14]
[private, private, 15]
[let, let, 15]
[id, b, 15]
[colon, :, 15]
[float, float, 15]
[semi, ;, 15]
[private, private, 16]
[let, let, 16]
[id, c, 16]
[colon, :, 16]
[float, float, 16]
[semi, ;, 16]
[public, public, 17]
[func, func, 17]
[id, build, 17]
[openpar, (, 17]
[id, A, 17]
[colon, :, 17]
[float, float, 17]
[comma, ,, 17]
[id, B, 17]
[colon, :, 17]
[float, float, 17]
[comma, ,, 17]
[id, C, 17]
[colon, :, 17]
[float, float, 17]
[closepar, ), 17]
[arrow, ->, 17]
[id, QUADRATIC, 17]
[semi, ;, 17]
[public, public, 18]
[func, func, 18]
[id, evaluate, 18]
[openpar, (, 18]
[id, x, 18]
[colon, :, 18]
[float, float, 18]
[closepar, ), 18]
[arrow, ->, 18]
[float, float, 18]
[semi, ;, 18]
[closecubr, }, 19]
[semi, ;, 19]
[inlinecmt, // ====== struct implementations ====== //\r\n, 21]
[impl, impl, 22]
[id, POLYNOMIAL, 22]
[opencubr, {, 22]
[func, func, 23]
[id, evaluate, 23]
[openpar, (, 23]
[id, x, 23]
[colon, :, 23]
[float, float, 23]
[closepar, ), 23]
[arrow, ->, 23]
[float, float, 23]
[opencubr, {, 24]
[return, return, 25]
[openpar, (, 25]
[floatnum, 0.0, 25]
[closepar, ), 25]
[semi, ;, 25]
[closecubr, }, 26]
[closecubr, }, 27]
[impl, impl, 29]
[id, QUADRATIC, 29]
[opencubr, {, 29]
[func, func, 30]
[id, evaluate, 30]
[openpar, (, 30]
[id, x, 30]
[colon, :, 30]
[float, float, 30]
[closepar, ), 30]
[arrow, ->, 30]
[float, float, 30]
[opencubr, {, 31]
[let, let, 32]
[id, result, 32]
[colon, :, 32]
[float, float, 32]
[semi, ;, 32]
[inlinecmt, //Using Horner's method\r\n, 33]
[id, result, 34]
[assign, =, 34]
[id, a, 34]
[semi, ;, 34]
[id, result, 35]
[assign, =, 35]
[id, result, 35]
[mult, *, 35]
[id, x, 35]
[plus, +, 35]
[id, b, 35]
[semi, ;, 35]
[id, result, 36]
[assign, =, 36]
[id, result, 36]
[mult, *, 36]
[id, x, 36]
[plus, +, 36]
[id, c, 36]
[semi, ;, 36]
[return, return, 37]
[openpar, (, 37]
[id, result, 37]
[closepar, ), 37]
[semi, ;, 37]
[closecubr, }, 38]
[func, func, 39]
[id, build, 39]
[openpar, (, 39]
[id, A, 39]
[colon, :, 39]
[float, float, 39]
[comma, ,, 39]
[id, B, 39]
[colon, :, 39]
[float, float, 39]
[comma, ,, 39]
[id, C, 39]
[colon, :, 39]
[float, float, 39]
[closepar, ), 39]
[arrow, ->, 39]
[id, QUADRATIC, 39]
[opencubr, {, 40]
[let, let, 41]
[id, new_function, 41]
[colon, :, 41]
[id, QUADRATIC, 41]
[semi, ;, 41]
[id, new_function, 42]
[dot, ., 42]
[id, a, 42]
[assign, =, 42]
[id, A, 42]
[semi, ;, 42]
[id, new_function, 43]
[dot, ., 43]
[id, b, 43]
[assign, =, 43]
[id, B, 43]
[semi, ;, 43]
[id, new_function, 44]
[dot, ., 44]
[id, c, 44]
[assign, =, 44]
[id, C, 44]
[semi, ;, 44]
[return, return, 45]
[openpar, (, 45]
[id, new_function, 45]
[closepar, ), 45]
[semi, ;, 45]
[closecubr, }, 46]
[closecubr, }, 47]
[impl, impl, 49]
[id, LINEAR, 49]
[opencubr, {, 49]
[func, func, 50]
[id, build, 50]
[openpar, (, 50]
[id, A, 50]
[colon, :, 50]
[float, float, 50]
[comma, ,, 50]
[id, B, 50]
[colon, :, 50]
[float, float, 50]
[closepar, ), 50]
[arrow, ->, 50]
[id, LINEAR, 50]
[opencubr, {, 51]
[let, let, 52]
[id, new_function, 52]
[colon, :, 52]
[id, LINEAR, 52]
[semi, ;, 52]
[id, new_function, 53]
[dot, ., 53]
[id, a, 53]
[assign, =, 53]
[id, A, 53]
[semi, ;, 53]
[id, new_function, 54]
[dot, ., 54]
[id, b, 54]
[assign, =, 54]
[id, B, 54]
[semi, ;, 54]
[return, return, 55]
[openpar, (, 55]
[id, new_function, 55]
[closepar, ), 55]
[semi, ;, 55]
[closecubr, }, 56]
[func, func, 57]
[id, evaluate, 57]
[openpar, (, 57]
[id, x, 57]
[colon, :, 57]
[float, float, 57]
[closepar, ), 57]
[arrow, ->, 57]
[float, float, 57]
[opencubr, {, 58]
[let, let, 59]
[id, result, 59]
[colon, :, 59]
[float, float, 59]
[semi, ;, 59]
[id, result, 60]
[assign, =, 60]
[floatnum, 0.0, 60]
[semi, ;, 60]
[id, result, 61]
[assign, =, 61]
[id, a, 61]
[mult, *, 61]
[id, x, 61]
[plus, +, 61]
[id, b, 61]
[semi, ;, 61]
[return, return, 62]
[openpar, (, 62]
[id, result, 62]
[closepar, ), 62]
[semi, ;, 62]
[closecubr, }, 63]
[closecubr, }, 64]
[inlinecmt, // ====== main ====== //\r\n, 66]
[func, func, 67]
[id, main, 67]
[openpar, (, 67]
[closepar, ), 67]
[arrow, ->, 67]
[void, void, 67]
[opencubr, {, 68]
[let, let, 69]
[id, f1, 69]
[colon, :, 69]
[id, LINEAR, 69]
[semi, ;, 69]
[let, let, 70]
[id, f2, 70]
[colon, :, 70]
[id, QUADRATIC, 70]
[semi, ;, 70]
[let, let, 71]
[id, counter, 71]
[colon, :, 71]
[float, float, 71]
[semi, ;, 71]
[id, f1, 72]
[assign, =, 72]
[id, f1, 72]
[dot, ., 72]
[id, build, 72]
[openpar, (, 72]
[floatnum, 2.0, 72]
[comma, ,, 72]
[floatnum, 3.5, 72]
[closepar, ), 72]
[semi, ;, 72]
[id, f2, 73]
[assign, =, 73]
[id, f2, 73]
[dot, ., 73]
[id, build, 73]
[openpar, (, 73]
[minus, -, 73]
[floatnum, 2.0, 73]
[comma, ,, 73]
[floatnum, 1.0, 73]
[comma, ,, 73]
[floatnum, 0.0, 73]
[closepar, ), 73]
[semi, ;, 73]
[id, counter, 74]
[assign, =, 74]
[floatnum, 1.0, 74]
[semi, ;, 74]
[while, while, 76]
[openpar, (, 76]
[id, counter, 76]
[leq, <=, 76]
[intnum, 10, 76]
[closepar, ), 76]
[opencubr, {, 77]
[write, write, 78]
[openpar, (, 78]
[id, counter, 78]
[closepar, ), 78]
[semi, ;, 78]
[write, write, 79]
[openpar, (, 79]
[id, f1, 79]
[dot, ., 79]
[id, evaluate, 79]
[openpar, (, 79]
[id, counter, 79]
[closepar, ), 79]
[closepar, ), 79]
[semi, ;, 79]
[write, write, 80]
[openpar, (, 80]
[id, f2, 80]
[dot, ., 80]
[id, evaluate, 80]
[openpar, (, 80]
[id, counter, 80]
[closepar, ), 80]
[closepar, ), 80]
[semi, ;, 80]
[closecubr, }, 81]
[semi, ;, 81]
[closecubr, }, 82]
[blockcmt, /*\r\n1.   |X| global symbol table\r\n2.   |X| class symbol table\r\n3.1  |X| class data member\r\n3.2  |X| function's local variable\r\n4.1  |X| free function\r\n4.2  |X| member function\r\n6.1  | | undeclared member function definition\r\n6.2  | | undefined member function declaration\r\n8.1  | | multiply declared class\r\n8.2  | | multiply declared free function\r\n8.3  | | multiply declared identifier in class\r\n8.4  | | multiply declared identifier in function\r\n8.5  | | shadowed inherited data member\r\n9.1  | | Overloaded free function\r\n9.2  | | Overloaded member function\r\n9.3  | | Overridden inherited member function\r\n10.1 | | Type error in expression\r\n10.2 | | Type error in assignment statement\r\n10.3 | | Type error in return statement\r\n11.1 | | Undeclared local variable\r\n11.2 | | Undeclared data member\r\n11.3 | | Undeclared member function\r\n11.4 | | Undeclared free function\r\n11.5 | | Undeclared class\r\n12.1 | | Function call with wrong number of parameters\r\n12.2 | | Function call with wrong type of parameters\r\n13.1 | | Use of array with wrong number of dimensions\r\n13.2 | | Array index is not an integer\r\n13.3 | | Array parameter using wrong number of dimensions\r\n14.1 | | Circular class dependency\r\n15.1 | | \".\" operator used on non-class type\r\n*/, 84]
[blockcmt, /*\r\n    classes\r\n    --------------------------------------\r\n| | no class declaration\r\n| | class declaration\r\n|X| multiple class declarations\r\n|X| no data member declaration\r\n|X| data member declaration\r\n|X| multiple data member declaration\r\n| | no member function declaration\r\n|X| member function declaration\r\n|X| multiple member function declaration\r\n| | no member\r\n|X| no inherited class\r\n|X| one inherited class\r\n| | multiple inherited classes\r\n|X| private member specifier\r\n|X| public member specifier\r\n\r\n    functions: definitions\r\n    --------------------------------------\r\n| | no main function definition\r\n|X| main function definition\r\n|X| no free function definition\r\n| | free function definition\r\n| | multiple free function definitions\r\n| | no member function definition\r\n|X| member function definition\r\n|X| multiple member function definitions\r\n| | return type: void\r\n| | return type: integer\r\n|X| return type: float\r\n|X| return type: id\r\n| | return type: array (not allowed)\r\n\r\n    functions: formal parameters\r\n    --------------------------------------\r\n| | type: integer\r\n|X| type: float\r\n| | type: id\r\n| | type: 1-dim array\r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    functions: calls\r\n    --------------------------------------\r\n| | free function call\r\n|X| member function call\r\n| | parameters:0\r\n|X| parameters:1\r\n|X| parameters:n\r\n| | array parameter - 1-dim\r\n| | array parameter - n-dim\r\n| | array parameter - with size\r\n| | array parameter - without size\r\n| | function call as statement\r\n|X| function call as expression factor\r\n| | expression as parameter\r\n\r\n    variable declaration\r\n    --------------------------------------\r\n| | type: integer\r\n| | type: float\r\n| | type: string\r\n|X| type: id\r\n| | type: 1-dim array\r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    function body: local variable declarations\r\n    --------------------------------------\r\n| | no local variable declarations\r\n|X| local variable declarations\r\n| | intertwined statements and variable declarations\r\n\r\n    function body: statements\r\n    --------------------------------------\r\n| | no statement\r\n| | 1 statement\r\n|X| n statements\r\n| | if statement\r\n| | if: empty then or else blocks\r\n| | if: 1-statement then or else blocks\r\n| | if: n-statements then or else blocks\r\n|X| while statement\r\n| | while: empty block\r\n| | while: 1-statement block\r\n|X| while: n-statement block\r\n| | read(<variable>) statement\r\n|X| write(<expr>) statement\r\n|X| return(<expr>) statement\r\n|X| assignment statement\r\n\r\n    variable + idnest\r\n    --------------------------------------\r\n|X| id\r\n|X| id.id\r\n|X| id.id(id)\r\n| | id(id).id\r\n| | id(id).id()\r\n| | id.id[id]\r\n| | id[id].id\r\n| | id[id].id[id]\r\n| | id.id[id][id]\r\n| | id[id][id].id\r\n| | id[id][id].id[id][id]\r\n| | id(id).id[id]\r\n| | id(id).id[id][id]\r\n| | expression as array index\r\n\r\n    expressions\r\n    --------------------------------------\r\n| | single variable\r\n| | involving addop\r\n| | involving multop\r\n| | involving relop\r\n|X| involving addop + multop\r\n| | involving multop + relop\r\n| | involving addop + multop + relop\r\n| | involving parentheses\r\n| | involving nested parenhteses\r\n| | involving not\r\n| | involving sign\r\n| | involving literals\r\n|X| involving variable + idnest\r\n|X| involving function calls\r\n| | involving all the above in one expression\r\n*/, 118]
[$, $, 248]

[inlinecmt, // Assignment 5 coverage:\r\n, 1]
[inlinecmt, //      -------------\r\n, 2]
[inlinecmt, //      | YES | NO  |\r\n, 3]
[inlinecmt, //      ------------- \r\n, 4]
[inlinecmt, // 1.1: |  X  |     |\r\n, 5]
[inlinecmt, // 1.2: |  X  |     |\r\n, 6]
[inlinecmt, // 1.3: |  X  |     |\r\n, 7]
[inlinecmt, // 1.4: |     |  X  |\r\n, 8]
[inlinecmt, // 2.1: |  X  |     |\r\n, 9]
[inlinecmt, // 2.2: |  X  |     |\r\n, 10]
[inlinecmt, // 2.3: |  X  |     |\r\n, 11]
[inlinecmt, // 2.4: |  X  |     |\r\n, 12]
[inlinecmt, // 3.1: |  X  |     |\r\n, 13]
[inlinecmt, // 3.2: |  X  |     |\r\n, 14]
[inlinecmt, // 3.3: |  X  |     |\r\n, 15]
[inlinecmt, // 3.4: |  X  |     |\r\n, 16]
[inlinecmt, // 4.1: |     |  X  |\r\n, 17]
[inlinecmt, // 4.2: |     |  X  |\r\n, 18]
[inlinecmt, // 4.3: |  X  |     |\r\n, 19]
[inlinecmt, // 4.4: |  X  |     |\r\n, 20]
[inlinecmt, // 5.1: |  X  |     |\r\n, 21]
[inlinecmt, // 5.2: |     |  X  |\r\n, 22]
[inlinecmt, // 5.3: |  X  |     |\r\n, 23]
[inlinecmt, //      -------------\r\n, 24]
[inlinecmt, // ====== struct declarations ====== //\r\n, 26]
[struct, struct, 27]
[id, POLYNOMIAL, 27]
[opencubr, {, 27]
[public, public, 28]
[func, func, 28]
[id, evaluate, 28]
[openpar, (, 28]
[id, x, 28]
[colon, :, 28]
[float, float, 28]
[closepar, ), 28]
[arrow, ->, 28]
[float, float, 28]
[semi, ;, 28]
[closecubr, }, 29]
[semi, ;, 29]
[struct, struct, 31]
[id, LINEAR, 31]
[inherits, inherits, 31]
[id, POLYNOMIAL, 31]
[opencubr, {, 31]
[private, private, 32]
[let, let, 32]
[id, a, 32]
[colon, :, 32]
[float, float, 32]
[semi, ;, 32]
[private, private, 33]
[let, let, 33]
[id, b, 33]
[colon, :, 33]
[float, float, 33]
[semi, ;, 33]
[public, public, 34]
[func, func, 34]
[id, build, 34]
[openpar, (, 34]
[id, A, 34]
[colon, :, 34]
[float, float, 34]
[comma, ,, 34]
[id, B, 34]
[colon, :, 34]
[float, float, 34]
[closepar, ), 34]
[arrow, ->, 34]
[id, LINEAR, 34]
[semi, ;, 34]
[public, public, 35]
[func, func, 35]
[id, evaluate, 35]
[openpar, (, 35]
[id, x, 35]
[colon, :, 35]
[float, float, 35]
[closepar, ), 35]
[arrow, ->, 35]
[float, float, 35]
[semi, ;, 35]
[closecubr, }, 36]
[semi, ;, 36]
[struct, struct, 38]
[id, QUADRATIC, 38]
[inherits, inherits, 38]
[id, POLYNOMIAL, 38]
[opencubr, {, 38]
[private, private, 39]
[let, let, 39]
[id, a, 39]
[colon, :, 39]
[float, float, 39]
[semi, ;, 39]
[private, private, 40]
[let, let, 40]
[id, b, 40]
[colon, :, 40]
[float, float, 40]
[semi, ;, 40]
[private, private, 41]
[let, let, 41]
[id, c, 41]
[colon, :, 41]
[float, float, 41]
[semi, ;, 41]
[public, public, 42]
[func, func, 42]
[id, build, 42]
[openpar, (, 42]
[id, A, 42]
[colon, :, 42]
[float, float, 42]
[comma, ,, 42]
[id, B, 42]
[colon, :, 42]
[float, float, 42]
[comma, ,, 42]
[id, C, 42]
[colon, :, 42]
[float, float, 42]
[closepar, ), 42]
[arrow, ->, 42]
[id, QUADRATIC, 42]
[semi, ;, 42]
[public, public, 43]
[func, func, 43]
[id, evaluate, 43]
[openpar, (, 43]
[id, x, 43]
[colon, :, 43]
[float, float, 43]
[closepar, ), 43]
[arrow, ->, 43]
[float, float, 43]
[semi, ;, 43]
[closecubr, }, 44]
[semi, ;, 44]
[inlinecmt, // ====== struct implementations ====== //\r\n, 46]
[impl, impl, 47]
[id, POLYNOMIAL, 47]
[opencubr, {, 47]
[func, func, 48]
[id, evaluate, 48]
[openpar, (, 48]
[id, x, 48]
[colon, :, 48]
[float, float, 48]
[closepar, ), 48]
[arrow, ->, 48]
[float, float, 48]
[inlinecmt, // 2.1, 2.2\r\n, 48]
[opencubr, {, 49]
[return, return, 50]
[openpar, (, 50]
[intnum, 0, 50]
[closepar, ), 50]
[semi, ;, 50]
[inlinecmt, // 2.3 \r\n, 50]
[closecubr, }, 51]
[closecubr, }, 52]
[impl, impl, 54]
[id, QUADRATIC, 54]
[opencubr, {, 54]
[func, func, 55]
[id, evaluate, 55]
[openpar, (, 55]
[id, x, 55]
[colon, :, 55]
[float, float, 55]
[closepar, ), 55]
[arrow, ->, 55]
[float, float, 55]
[inlinecmt, // 2.1, 2.2\r\n, 55]
[opencubr, {, 56]
[let, let, 57]
[id, result, 57]
[colon, :, 57]
[float, float, 57]
[semi, ;, 57]
[inlinecmt, // 1.1\r\n, 57]
[inlinecmt, //Using Horner's method\r\n, 58]
[id, result, 59]
[assign, =, 59]
[id, a, 59]
[semi, ;, 59]
[inlinecmt, // 3.1       \r\n, 59]
[id, result, 60]
[assign, =, 60]
[id, result, 60]
[mult, *, 60]
[id, x, 60]
[plus, +, 60]
[id, b, 60]
[semi, ;, 60]
[inlinecmt, // 3.1, 5.1\r\n, 60]
[id, result, 61]
[assign, =, 61]
[id, result, 61]
[mult, *, 61]
[id, x, 61]
[plus, +, 61]
[id, c, 61]
[semi, ;, 61]
[inlinecmt, // 3.1, 5.1\r\n, 61]
[return, return, 62]
[openpar, (, 62]
[id, result, 62]
[closepar, ), 62]
[semi, ;, 62]
[inlinecmt, // 2.3\r\n, 62]
[closecubr, }, 63]
[func, func, 64]
[id, build, 64]
[openpar, (, 64]
[id, A, 64]
[colon, :, 64]
[float, float, 64]
[comma, ,, 64]
[id, B, 64]
[colon, :, 64]
[float, float, 64]
[comma, ,, 64]
[id, C, 64]
[colon, :, 64]
[float, float, 64]
[closepar, ), 64]
[arrow, ->, 64]
[id, QUADRATIC, 64]
[inlinecmt, // 2.1, 2.2\r\n, 64]
[opencubr, {, 65]
[let, let, 66]
[id, new_function, 66]
[colon, :, 66]
[id, QUADRATIC, 66]
[semi, ;, 66]
[inlinecmt, // 1.3\r\n, 66]
[id, new_function, 67]
[dot, ., 67]
[id, a, 67]
[assign, =, 67]
[id, A, 67]
[semi, ;, 67]
[inlinecmt, // 3.1, 5.3\r\n, 67]
[id, new_function, 68]
[dot, ., 68]
[id, b, 68]
[assign, =, 68]
[id, B, 68]
[semi, ;, 68]
[inlinecmt, // 3.1, 5.3\r\n, 68]
[id, new_function, 69]
[dot, ., 69]
[id, c, 69]
[assign, =, 69]
[id, C, 69]
[semi, ;, 69]
[inlinecmt, // 3.1, 5.3\r\n, 69]
[return, return, 70]
[openpar, (, 70]
[id, new_function, 70]
[closepar, ), 70]
[semi, ;, 70]
[inlinecmt, // 2.3\r\n, 70]
[closecubr, }, 71]
[closecubr, }, 72]
[impl, impl, 74]
[id, LINEAR, 74]
[opencubr, {, 74]
[func, func, 75]
[id, build, 75]
[openpar, (, 75]
[id, A, 75]
[colon, :, 75]
[float, float, 75]
[comma, ,, 75]
[id, B, 75]
[colon, :, 75]
[float, float, 75]
[closepar, ), 75]
[arrow, ->, 75]
[id, LINEAR, 75]
[inlinecmt, // 2.1, 2.2\r\n, 75]
[opencubr, {, 76]
[let, let, 77]
[id, new_function, 77]
[colon, :, 77]
[id, LINEAR, 77]
[semi, ;, 77]
[inlinecmt, // 1.3\r\n, 77]
[id, new_function, 78]
[dot, ., 78]
[id, a, 78]
[assign, =, 78]
[id, A, 78]
[semi, ;, 78]
[inlinecmt, // 3.1, 5.3\r\n, 78]
[id, new_function, 79]
[dot, ., 79]
[id, b, 79]
[assign, =, 79]
[id, B, 79]
[semi, ;, 79]
[inlinecmt, // 3.1, 5.3\r\n, 79]
[return, return, 80]
[openpar, (, 80]
[id, new_function, 80]
[closepar, ), 80]
[semi, ;, 80]
[inlinecmt, // 2.3\r\n, 80]
[closecubr, }, 81]
[func, func, 82]
[id, evaluate, 82]
[openpar, (, 82]
[id, x, 82]
[colon, :, 82]
[float, float, 82]
[closepar, ), 82]
[arrow, ->, 82]
[float, float, 82]
[inlinecmt, // 2.1, 2.2\r\n, 82]
[opencubr, {, 83]
[let, let, 84]
[id, result, 84]
[colon, :, 84]
[float, float, 84]
[semi, ;, 84]
[inlinecmt, // 1.1\r\n, 84]
[id, result, 85]
[assign, =, 85]
[floatnum, 0.0, 85]
[semi, ;, 85]
[inlinecmt, // 3.1\r\n, 85]
[id, result, 86]
[assign, =, 86]
[id, a, 86]
[mult, *, 86]
[id, x, 86]
[plus, +, 86]
[id, b, 86]
[semi, ;, 86]
[inlinecmt, // 3.1, 5.1\r\n, 86]
[return, return, 87]
[openpar, (, 87]
[id, result, 87]
[closepar, ), 87]
[semi, ;, 87]
[inlinecmt, // 2.3\r\n, 87]
[closecubr, }, 88]
[closecubr, }, 89]
[inlinecmt, // ====== main ====== //\r\n, 91]
[func, func, 92]
[id, main, 92]
[openpar, (, 92]
[closepar, ), 92]
[arrow, ->, 92]
[void, void, 92]
[inlinecmt, // 2.1, 2.2\r\n, 92]
[opencubr, {, 93]
[let, let, 94]
[id, f1, 94]
[colon, :, 94]
[id, LINEAR, 94]
[semi, ;, 94]
[inlinecmt, // 1.3\r\n, 94]
[let, let, 95]
[id, f2, 95]
[colon, :, 95]
[id, QUADRATIC, 95]
[semi, ;, 95]
[inlinecmt, // 1.3\r\n, 95]
[let, let, 96]
[id, counter, 96]
[colon, :, 96]
[integer, integer, 96]
[semi, ;, 96]
[inlinecmt, // 1.1\r\n, 96]
[id, f1, 97]
[assign, =, 97]
[id, f1, 97]
[dot, ., 97]
[id, build, 97]
[openpar, (, 97]
[intnum, 2, 97]
[comma, ,, 97]
[floatnum, 3.5, 97]
[closepar, ), 97]
[semi, ;, 97]
[inlinecmt, // 2.1, 2.2, 2.4\r\n, 97]
[id, f2, 98]
[assign, =, 98]
[id, f2, 98]
[dot, ., 98]
[id, build, 98]
[openpar, (, 98]
[minus, -, 98]
[floatnum, 2.0, 98]
[comma, ,, 98]
[floatnum, 1.0, 98]
[comma, ,, 98]
[floatnum, 0.0, 98]
[closepar, ), 98]
[semi, ;, 98]
[inlinecmt, // 2.1, 2.2, 2.4\r\n, 98]
[id, counter, 99]
[assign, =, 99]
[intnum, 1, 99]
[semi, ;, 99]
[inlinecmt, // 3.1\r\n, 99]
[while, while, 101]
[openpar, (, 101]
[id, counter, 101]
[leq, <=, 101]
[intnum, 10, 101]
[closepar, ), 101]
[inlinecmt, // 3.3, 5.1 \r\n, 101]
[opencubr, {, 102]
[write, write, 103]
[openpar, (, 103]
[id, counter, 103]
[closepar, ), 103]
[semi, ;, 103]
[inlinecmt, // 3.4\r\n, 103]
[write, write, 104]
[openpar, (, 104]
[id, f1, 104]
[dot, ., 104]
[id, evaluate, 104]
[openpar, (, 104]
[id, counter, 104]
[closepar, ), 104]
[closepar, ), 104]
[semi, ;, 104]
[inlinecmt, // 3.4, 2.1, 2.2, 2.4\r\n, 104]
[write, write, 105]
[openpar, (, 105]
[id, f2, 105]
[dot, ., 105]
[id, evaluate, 105]
[openpar, (, 105]
[id, counter, 105]
[closepar, ), 105]
[closepar, ), 105]
[semi, ;, 105]
[inlinecmt, // 3.4, 2.1, 2.2, 2.4\r\n, 105]
[closecubr, }, 106]
[semi, ;, 106]
[closecubr, }, 107]
[$, $, 108]

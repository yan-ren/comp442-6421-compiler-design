[inlinecmt, // Assignment 5 coverage:\n, 1]
[inlinecmt, //      -------------\n, 2]
[inlinecmt, //      | YES | NO  |\n, 3]
[inlinecmt, //      -------------\n, 4]
[inlinecmt, // 1.1: |  X  |     |\n, 5]
[inlinecmt, // 1.2: |  X  |     |\n, 6]
[inlinecmt, // 1.3: |     |  X  |\n, 7]
[inlinecmt, // 1.4: |     |  X  |\n, 8]
[inlinecmt, // 2.1: |  X  |     |\n, 9]
[inlinecmt, // 2.2: |  X  |     |\n, 10]
[inlinecmt, // 2.3: |     |  X  |\n, 11]
[inlinecmt, // 2.4: |     |  X  |\n, 12]
[inlinecmt, // 3.1: |  X  |     |\n, 13]
[inlinecmt, // 3.2: |  X  |     |\n, 14]
[inlinecmt, // 3.3: |  X  |     |\n, 15]
[inlinecmt, // 3.4: |  X  |     |\n, 16]
[inlinecmt, // 4.1: |  X  |     |\n, 17]
[inlinecmt, // 4.2: |     |  X  |\n, 18]
[inlinecmt, // 4.3: |     |  X  |\n, 19]
[inlinecmt, // 4.4: |     |  X  |\n, 20]
[inlinecmt, // 5.1: |  X  |     |\n, 21]
[inlinecmt, // 5.2: |  X  |     |\n, 22]
[inlinecmt, // 5.3: |     |  X  |\n, 23]
[inlinecmt, //      -------------\n, 24]
[blockcmt, /* sort the array */, 26]
[func, func, 27]
[id, bubbleSort, 27]
[openpar, (, 27]
[id, arr, 27]
[colon, :, 27]
[integer, integer, 27]
[opensqbr, [, 27]
[closesqbr, ], 27]
[comma, ,, 27]
[id, size, 27]
[colon, :, 27]
[integer, integer, 27]
[closepar, ), 27]
[arrow, ->, 27]
[void, void, 27]
[inlinecmt, // 2.1, 2.2\n, 27]
[opencubr, {, 28]
[let, let, 29]
[id, n, 29]
[colon, :, 29]
[integer, integer, 29]
[semi, ;, 29]
[inlinecmt, // 1.1\n, 29]
[let, let, 30]
[id, i, 30]
[colon, :, 30]
[integer, integer, 30]
[semi, ;, 30]
[inlinecmt, // 1.1\n, 30]
[let, let, 31]
[id, j, 31]
[colon, :, 31]
[integer, integer, 31]
[semi, ;, 31]
[inlinecmt, // 1.1\n, 31]
[let, let, 32]
[id, temp, 32]
[colon, :, 32]
[integer, integer, 32]
[semi, ;, 32]
[inlinecmt, // 1.1\n, 32]
[id, n, 33]
[assign, =, 33]
[id, size, 33]
[semi, ;, 33]
[inlinecmt, // 3.1\n, 33]
[id, i, 34]
[assign, =, 34]
[intnum, 0, 34]
[semi, ;, 34]
[inlinecmt, // 3.1\n, 34]
[id, j, 35]
[assign, =, 35]
[intnum, 0, 35]
[semi, ;, 35]
[inlinecmt, // 3.1\n, 35]
[id, temp, 36]
[assign, =, 36]
[intnum, 0, 36]
[semi, ;, 36]
[inlinecmt, // 3.1\n, 36]
[blockcmt, /*\n  write(n);\n  write(size);\n  write(i);\n  write(temp);\n*/, 37]
[while, while, 43]
[openpar, (, 43]
[id, i, 43]
[lt, <, 43]
[id, n, 43]
[minus, -, 43]
[intnum, 1, 43]
[closepar, ), 43]
[opencubr, {, 43]
[inlinecmt, // 3.3, 5.1\n, 43]
[while, while, 44]
[openpar, (, 44]
[id, j, 44]
[lt, <, 44]
[id, n, 44]
[minus, -, 44]
[id, i, 44]
[minus, -, 44]
[intnum, 1, 44]
[closepar, ), 44]
[opencubr, {, 44]
[inlinecmt, // 3.3\n, 44]
[if, if, 45]
[openpar, (, 45]
[id, arr, 45]
[opensqbr, [, 45]
[id, j, 45]
[closesqbr, ], 45]
[gt, >, 45]
[id, arr, 45]
[opensqbr, [, 45]
[id, j, 45]
[plus, +, 45]
[intnum, 1, 45]
[closesqbr, ], 45]
[closepar, ), 45]
[inlinecmt, // 3.2, 4.1, 5.1, 5.2\n, 45]
[then, then, 46]
[opencubr, {, 46]
[inlinecmt, // swap temp and arr[i]\n, 47]
[inlinecmt, //          temp = arr[j];                                 // 3.1, 4.1, 5.2\n, 48]
[inlinecmt, //          arr[j] = arr[j+1];                             // 3.1, 4.1, 5.2\n, 49]
[inlinecmt, //          arr[j+1] = temp;                               // 3.1, 4.1, 5.2\n, 50]
[closecubr, }, 51]
[else, else, 51]
[semi, ;, 51]
[id, j, 52]
[assign, =, 52]
[id, j, 52]
[plus, +, 52]
[intnum, 1, 52]
[semi, ;, 52]
[inlinecmt, // 3.1, 5.1\n, 52]
[closecubr, }, 53]
[semi, ;, 53]
[id, i, 54]
[assign, =, 54]
[id, i, 54]
[plus, +, 54]
[intnum, 1, 54]
[semi, ;, 54]
[inlinecmt, // 3.1, 5.1\n, 54]
[closecubr, }, 55]
[semi, ;, 55]
[return, return, 56]
[openpar, (, 56]
[intnum, 0, 56]
[closepar, ), 56]
[semi, ;, 56]
[closecubr, }, 57]
[blockcmt, /* Print the array */, 59]
[func, func, 60]
[id, printArray, 60]
[openpar, (, 60]
[id, arr, 60]
[colon, :, 60]
[integer, integer, 60]
[opensqbr, [, 60]
[closesqbr, ], 60]
[comma, ,, 60]
[id, size, 60]
[colon, :, 60]
[integer, integer, 60]
[closepar, ), 60]
[arrow, ->, 60]
[void, void, 60]
[inlinecmt, // 2.1, 2.2\n, 60]
[opencubr, {, 61]
[let, let, 62]
[id, n, 62]
[colon, :, 62]
[integer, integer, 62]
[semi, ;, 62]
[inlinecmt, // 1.1\n, 62]
[let, let, 63]
[id, i, 63]
[colon, :, 63]
[integer, integer, 63]
[semi, ;, 63]
[inlinecmt, // 1.1\n, 63]
[id, n, 64]
[assign, =, 64]
[id, size, 64]
[semi, ;, 64]
[inlinecmt, // 3.1\n, 64]
[id, i, 65]
[assign, =, 65]
[intnum, 0, 65]
[semi, ;, 65]
[inlinecmt, // 3.1\n, 65]
[blockcmt, /*\n  write(size);\n  write(n);\n  write(i);\n*/, 66]
[while, while, 72]
[openpar, (, 72]
[id, i, 72]
[lt, <, 72]
[id, n, 72]
[closepar, ), 72]
[opencubr, {, 72]
[inlinecmt, // 3.3, 5.1\n, 72]
[write, write, 73]
[openpar, (, 73]
[id, arr, 73]
[opensqbr, [, 73]
[id, i, 73]
[closesqbr, ], 73]
[closepar, ), 73]
[semi, ;, 73]
[inlinecmt, // 3.4, 4.1, 5.2\n, 73]
[id, i, 74]
[assign, =, 74]
[id, i, 74]
[plus, +, 74]
[intnum, 1, 74]
[semi, ;, 74]
[inlinecmt, // 3.1, 5.1\n, 74]
[closecubr, }, 75]
[semi, ;, 75]
[return, return, 76]
[openpar, (, 76]
[intnum, 0, 76]
[closepar, ), 76]
[semi, ;, 76]
[closecubr, }, 77]
[inlinecmt, // main funtion to test above\n, 79]
[func, func, 80]
[id, main, 80]
[openpar, (, 80]
[closepar, ), 80]
[arrow, ->, 80]
[void, void, 80]
[opencubr, {, 81]
[let, let, 82]
[id, arr, 82]
[colon, :, 82]
[integer, integer, 82]
[opensqbr, [, 82]
[intnum, 7, 82]
[closesqbr, ], 82]
[semi, ;, 82]
[inlinecmt, // 1.1\n, 82]
[id, arr, 83]
[opensqbr, [, 83]
[intnum, 0, 83]
[closesqbr, ], 83]
[assign, =, 83]
[intnum, 64, 83]
[semi, ;, 83]
[inlinecmt, // 3.1\n, 83]
[id, arr, 84]
[opensqbr, [, 84]
[intnum, 1, 84]
[closesqbr, ], 84]
[assign, =, 84]
[intnum, 34, 84]
[semi, ;, 84]
[inlinecmt, // 3.1\n, 84]
[id, arr, 85]
[opensqbr, [, 85]
[intnum, 2, 85]
[closesqbr, ], 85]
[assign, =, 85]
[intnum, 25, 85]
[semi, ;, 85]
[inlinecmt, // 3.1\n, 85]
[id, arr, 86]
[opensqbr, [, 86]
[intnum, 3, 86]
[closesqbr, ], 86]
[assign, =, 86]
[intnum, 12, 86]
[semi, ;, 86]
[inlinecmt, // 3.1\n, 86]
[id, arr, 87]
[opensqbr, [, 87]
[intnum, 4, 87]
[closesqbr, ], 87]
[assign, =, 87]
[intnum, 22, 87]
[semi, ;, 87]
[inlinecmt, // 3.1\n, 87]
[id, arr, 88]
[opensqbr, [, 88]
[intnum, 5, 88]
[closesqbr, ], 88]
[assign, =, 88]
[intnum, 11, 88]
[semi, ;, 88]
[inlinecmt, // 3.1\n, 88]
[id, arr, 89]
[opensqbr, [, 89]
[intnum, 6, 89]
[closesqbr, ], 89]
[assign, =, 89]
[intnum, 90, 89]
[semi, ;, 89]
[inlinecmt, // 3.1\n, 89]
[id, printArray, 90]
[openpar, (, 90]
[id, arr, 90]
[comma, ,, 90]
[intnum, 7, 90]
[closepar, ), 90]
[semi, ;, 90]
[inlinecmt, // 2.1, 2.2\n, 90]
[id, bubbleSort, 91]
[openpar, (, 91]
[id, arr, 91]
[comma, ,, 91]
[intnum, 7, 91]
[closepar, ), 91]
[semi, ;, 91]
[inlinecmt, // 2.1, 2.2\n, 91]
[id, printArray, 92]
[openpar, (, 92]
[id, arr, 92]
[comma, ,, 92]
[intnum, 7, 92]
[closepar, ), 92]
[semi, ;, 92]
[inlinecmt, // 2.1, 2.2\n, 92]
[closecubr, }, 93]
[$, $, 94]
